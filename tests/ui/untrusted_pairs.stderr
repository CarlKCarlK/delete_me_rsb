warning: unused import: `SortedDisjointIterator`
 --> tests/ui/untrusted_pairs.rs:1:34
  |
1 | use range_set_int::{RangeSetInt, SortedDisjointIterator};
  |                                  ^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

error[E0271]: expected `std::slice::Iter<'_, ({integer}, {integer})>` to be an iterator that yields `(_, _)`, but it yields `&({integer}, {integer})`
 --> tests/ui/untrusted_pairs.rs:8:41
  |
8 |     let range_set_int: RangeSetInt<_> = untrusted.iter().into();
  |                                         ^^^^^^^^^^^^^^^^ ---- required by a bound introduced by this call
  |                                         |
  |                                         expected tuple, found reference
  |
  = note:  expected tuple `(_, _)`
          found reference `&({integer}, {integer})`
  = note: required for `RangeSetInt<_>` to implement `From<std::slice::Iter<'_, ({integer}, {integer})>>`
  = note: required for `std::slice::Iter<'_, ({integer}, {integer})>` to implement `Into<RangeSetInt<_>>`

error[E0277]: the trait bound `std::slice::Iter<'_, ({integer}, {integer})>: SortedDisjoint` is not satisfied
 --> tests/ui/untrusted_pairs.rs:8:41
  |
8 |     let range_set_int: RangeSetInt<_> = untrusted.iter().into();
  |                                         ^^^^^^^^^^^^^^^^ ---- required by a bound introduced by this call
  |                                         |
  |                                         the trait `SortedDisjoint` is not implemented for `std::slice::Iter<'_, ({integer}, {integer})>`
  |
  = help: the following other types implement trait `SortedDisjoint`:
            BitOrIter<T, I>
            DynSortedDisjoint<'a, T>
            NotIter<T, I>
            Ranges<'_, T>
            itertools::tee::Tee<I>
            range_set_int::sorted_disjoint_from_iter::SortedDisjointWithLenSoFar<T, I>
  = note: required for `RangeSetInt<_>` to implement `From<std::slice::Iter<'_, ({integer}, {integer})>>`
  = note: required for `std::slice::Iter<'_, ({integer}, {integer})>` to implement `Into<RangeSetInt<_>>`
